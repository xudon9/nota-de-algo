#include "../../common.hpp"

// https://leetcode.com/problems/detonate-the-maximum-bombs/

// Timeout if use `set<int> visited` and `map<int, vector<int> Graph`. Why?
using Graph = std::vector<std::vector<int>>;

class Solution {
  Graph g;
  std::bitset<100> visited;

  void dfs(int i) {
    visited.set(i);
    for (int j : g[i]) {
      if (!visited.test(j))
        dfs(j);
    }
  }

public:
  int maximumDetonation(vector<vector<int>> &bombs) {
    const int nNode = bombs.size();
    g = Graph(nNode);

    for (int i = 0; i < nNode; ++i) {
      int xi = bombs[i][0];
      int yi = bombs[i][1];
      long ri = bombs[i][2], r2 = ri * ri;
      auto &nodes = g[i];

      for (int j = 0; j < nNode; ++j) {
        if (i == j)
          continue;
        long xj = bombs[j][0], yj = bombs[j][1];
        long dx = xi - xj, dy = yi - yj;
        long d2 = dx * dx + dy * dy;
        if (r2 >= d2) {
          nodes.push_back(j);
        }
      }
    }
    // DEBUG(g);

    int ret = 0;
    for (int i = 0; i < nNode; ++i) {
      visited.reset();
      dfs(i);
      ret = std::max(ret, (int)visited.count());
    }
    return ret;
  }
};

int main() {
  std::vector<vector<int>> bombs = {{2, 1, 3}, {6, 1, 4}};
  std::vector<vector<int>> bombs2 = {
      {1, 2, 3}, {2, 3, 1}, {3, 4, 2}, {4, 5, 3}, {5, 6, 4}};
  std::vector<vector<int>> bombs3 = {
      {81950, 78314, 8097},  {86969, 93811, 18836}, {31760, 47679, 81568},
      {84681, 27042, 67499}, {86586, 89355, 7058},  {46486, 87162, 28650},
      {21034, 15537, 5684},  {38998, 55350, 32549}, {37046, 63525, 63557},
      {68323, 75772, 25373}, {42360, 27940, 38723}, {98893, 66603, 41261},
      {36754, 7686, 71582},  {47363, 16099, 60653}, {64757, 29850, 37933},
      {47631, 41295, 31448}, {60057, 33630, 48806}, {29142, 38270, 66058},
      {69868, 96389, 15311}, {16428, 33255, 83721}, {65581, 96903, 40402},
      {65991, 32210, 37423}, {61274, 90790, 46425}, {58237, 19803, 58782},
      {68963, 21440, 36546}, {83100, 79338, 75563}, {91767, 36437, 10644},
      {48882, 98973, 93955}, {23091, 5016, 46409},  {40044, 51344, 5064},
      {91811, 72374, 53463}, {47328, 62639, 50770}, {50068, 47524, 33},
      {40468, 65037, 89084}, {8992, 61323, 72243},  {93985, 93978, 99193},
      {49783, 20026, 1098},  {70985, 77586, 29959}, {58653, 90891, 73616},
      {37914, 80477, 39024}, {95826, 68085, 58866}, {74710, 36936, 10459},
      {6546, 14062, 39219},  {60113, 24931, 61543}, {22505, 98658, 86127},
      {93751, 12254, 56765}, {35711, 56559, 79895}, {23440, 19479, 76289},
      {31129, 63312, 638},   {1629, 20102, 17774},  {23764, 52724, 64736},
      {11297, 36097, 23322}, {23593, 76094, 97650}, {34755, 85520, 38382},
      {53778, 38012, 37899}, {26069, 93625, 35145}, {85969, 69119, 7894},
      {87979, 24558, 53621}, {44704, 80636, 80158}, {92085, 78237, 44772},
      {46669, 24653, 46795}, {63094, 64772, 3125},  {77638, 95224, 81295},
      {47521, 90302, 78648}, {43594, 72334, 41190}, {17898, 13953, 38469},
      {83024, 503, 78287},   {39440, 38447, 50291}, {39206, 58782, 2076},
      {53974, 1306, 94510},  {70118, 16105, 27444}, {15857, 65217, 64148},
      {11323, 90157, 54734}, {20953, 23679, 51187}, {34223, 84019, 45679},
      {8405, 52861, 22327},  {7756, 44856, 34885},  {50271, 18660, 10388},
      {71856, 90448, 96946}, {77552, 86614, 55841}, {80879, 58222, 62149},
      {26477, 34765, 41617}, {48383, 37284, 64022}, {51514, 22416, 85067},
      {89939, 36582, 96570}, {42559, 73568, 68788}, {39436, 77992, 43709},
      {64781, 56842, 92260}, {97587, 43771, 65066}, {99283, 37616, 51245},
      {51024, 30796, 48549}, {90385, 73109, 55713}, {94380, 78079, 47913},
      {55172, 79906, 19927}, {60628, 86321, 69405}, {69373, 67954, 1782},
      {52337, 75410, 98366}, {17739, 52655, 16373}, {99473, 11036, 68556},
      {99047, 53116, 41939}};
  Solution s;
  int n = s.maximumDetonation(bombs2);
  DEBUG(n);
}
