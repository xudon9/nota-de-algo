#include "../../common.hpp"
auto fastio{[]() {
  std::ios::sync_with_stdio(0);
  std::cin.tie(0);
  return nullptr;
}()};

// https://leetcode.com/problems/longest-arithmetic-subsequence/

struct Solution {
  static int longestArithSeqLength(const vector<int> &nums) {
    size_t n{nums.size()};
    vector<std::map<int16_t, uint16_t>> dp(n);
    uint16_t res{};
    for (size_t i{1}; i < n; ++i) {
      int16_t right = nums[i];
      auto &mi = dp[i];
      for (size_t j{}; j < i; ++j) {
        int16_t diff = right - nums[j];
        auto &mj = dp[j];
        auto it_left = mj.find(diff);
        uint16_t len = 1 + (it_left == mj.end() ? 1 : it_left->second);

        // auto it = mi.lower_bound(diff);
        //  DEBUG(it->first == diff);

        // Very interesting point:
        // if (false && it->first == diff) {
        //   it->second = std::max(it->second, len);
        // } else {
        //   mi.emplace_hint(it, diff, len);
        // }
        mi[diff] = len;
        res = std::max(res, len);
      }
      // DEBUG(mi);
    }
    return res;
  }
};

struct Solution_tle2 {
  using Gap = short;
  using Length = short;
  vector<int> nums;
  vector<std::map<Gap, Length>> dp;

  Length maxLenFrom(size_t index, Gap gap) {
    auto [it, inserted] = dp[index].insert({gap, 0});
    short n = (short)nums.size();
    if (inserted || !it->second) {
      bool found{};
      for (short i = index + 1; i < n; ++i) {
        if (nums[i] - nums[index] == gap) {
          it->second = maxLenFrom(i, gap) + 1;
          found = true;
          break;
        }
      }
      if (!found) {
        it->second = 1;
      }
    }
    return it->second;
  }

  int longestArithSeqLength(vector<int> &arg) {
    nums = std::move(arg);
    if (nums.size() < 3)
      return nums.size();

    dp = decltype(dp)(nums.size());
    Length ret{};
    for (size_t i = 0; i < nums.size() - 1; ++i) {
      int v0 = nums[i];
      for (size_t j = i + 1; j < nums.size(); ++j) {
        Gap gap = nums[j] - v0;
        Length len = 1 + maxLenFrom(j, gap);
        dp[i][gap] = len;
        ret = std::max(ret, len);
      }
    }
    return ret;
  }
};

struct Solution_tle {
  using Length = int;
  using Gap = int;
  using Expect = int;

  static int longestArithSeqLength(const vector<int> &nums) {
    cout << "\n";
    std::map<std::pair<Gap, Expect>, Length> m;
    auto it = nums.cbegin() + 1, ite = nums.cend();
    int ret{INT_MIN};
    for (; it != ite; ++it) {
      decltype(m) m2;
      int n{*it};

      auto add = [&](int g, int e, int l) {
        // DEBUG(g, e, l);
        ret = std::max(ret, l);
        if (e < 0 || 500 < e)
          return;
        auto [it, p] = m2.insert({{g, e}, l});
        if (!p) {
          it->second = std::max(it->second, l);
        }
      };

      for (auto [gap_exp, len] : m) {
        auto [gap, exp] = gap_exp;
        if (n == exp) {
          add(gap, n + gap, len + 1);
        } else {
          add(gap, exp, len);
        }
      }

      for (auto it2 = nums.cbegin(); it2 != it; ++it2) {
        int v0{*it2};
        add(n - v0, 2 * n - v0, 2);
      }

      DEBUG(n, m2.size());
      m = std::move(m2);
    }
    return ret;
  }
};

int main(int argc, char *argv[]) {
#if 1
  vector<int> nums1{3, 6, 9, 12};
  vector<int> nums2{9, 4, 7, 2, 10};
  vector<int> nums3{20, 1, 15, 3, 10, 5, 8};
  vector<int> nums4{
      351, 243, 271, 8,   329, 473, 12,  148, 26,  380, 315, 221, 45,  312, 342,
      45,  360, 369, 99,  97,  301, 489, 90,  169, 131, 300, 392, 237, 310, 65,
      292, 374, 216, 213, 126, 288, 59,  409, 127, 311, 414, 111, 231, 400, 54,
      206, 352, 395, 358, 381, 208, 340, 367, 205, 269, 500, 76,  285, 87,  407,
      156, 75,  209, 273, 389, 286, 180, 132, 359, 149, 423, 120, 284, 356, 253,
      147, 36,  499, 490, 398, 42,  128, 346, 363, 133, 499, 221, 181, 161, 103,
      365, 144, 282, 97,  224, 222, 324, 36,  5,   147, 87,  373, 283, 338, 342,
      477, 35,  148, 38,  417, 265, 345, 8,   226, 170, 399, 299, 342, 69,  275,
      141, 32,  388, 309, 67,  308, 191, 441, 123, 379, 404, 125, 351, 251, 407,
      415, 102, 323, 293, 1,   456, 206, 20,  223, 460, 212, 9,   235, 104, 112,
      482, 343, 125, 31,  30,  176, 300, 405, 456, 477, 135, 461, 73,  394, 326,
      278, 182, 135, 347, 168, 433, 42,  361, 55,  138, 402, 325, 87,  11,  299,
      6,   492, 443, 235, 437, 235, 421, 351, 339, 384, 18,  87,  322, 213, 74,
      445, 260, 105, 19,  428, 452, 364, 144, 345, 484, 497, 292, 415, 353, 274,
      473, 426, 98,  493, 66,  96,  185, 7,   451, 258, 272, 488, 75,  266, 295,
      436, 358, 435, 469, 36,  276, 456, 416, 432, 188, 270, 362, 237, 420, 412,
      99,  373, 32,  130, 449, 276, 138, 310, 53,  478, 75,  180, 44,  448, 448,
      334, 498, 264, 486, 283, 404, 429, 458, 119, 400, 452, 157, 363, 155, 449,
      36,  13,  93,  69,  385, 119, 321, 177, 191, 128, 143, 34,  411, 453, 146,
      272, 427, 100, 30,  40,  238, 238, 339, 257, 371, 446, 39,  324, 180, 341,
      487, 419, 75,  325, 168, 50,  105, 477, 145, 360, 131, 275, 380, 444, 326,
      65,  331, 348, 329, 344, 154, 143, 105, 121, 380, 241, 394, 352, 28,  9,
      200, 439, 60,  400, 445, 494, 260, 204, 401, 311, 261, 496, 23,  48,  287,
      156, 310, 215, 238, 227, 85,  331, 178, 11,  83,  480, 261, 258, 4,   419,
      309, 220, 111, 226, 66,  373, 423, 445, 187, 322, 428, 247, 381, 288, 449,
      87,  489, 184, 303, 199, 362, 7,   354, 30,  491, 164, 248, 297, 457, 448,
      82,  270, 133, 266, 221, 130, 384, 228, 272, 122, 238, 0,   404, 72,  186,
      209, 30,  227, 260, 58,  130, 411, 108, 19,  204, 282, 130, 92,  328, 272,
      58,  178, 3,   186, 196, 345, 63,  259, 355, 185, 137, 381, 380, 86,  4,
      405, 494, 340, 95,  124, 53,  253, 252, 226, 471, 435, 415, 96,  495, 477,
      129, 319, 58,  461, 40,  138, 338, 411, 38,  238, 8,   162, 64,  76,  163,
      50,  175, 122, 318, 184, 480, 398, 342, 167, 151, 177, 12,  55,  141, 284,
      481, 463, 464, 349, 160, 147, 31,  267, 470, 390, 381, 238, 298, 130, 88,
      62,  400, 366, 85,  111, 492, 455, 143, 469, 474, 164, 244, 325, 482, 482,
      204, 448, 478, 155, 390, 468, 170, 115, 309, 372, 420, 214, 406, 173, 268,
      219, 158, 205, 337, 37,  241, 122, 421, 74,  390};
  vector<int> nums5{
      217, 226, 50,  152, 224, 233, 332, 481, 211, 448, 15,  274, 279, 389, 220,
      316, 453, 72,  386, 500, 225, 103, 230, 211, 329, 105, 257, 196, 390, 31,
      7,   393, 305, 102, 199, 142, 14,  298, 12,  382, 457, 220, 117, 262, 353,
      422, 139, 125, 498, 491, 417, 60,  463, 218, 240, 254, 327, 427, 282, 456,
      471, 32,  404, 499, 86,  318, 86,  151, 177, 131, 179, 175, 90,  314, 256,
      40,  299, 489, 219, 118, 249, 387, 56,  409, 322, 185, 115, 154, 80,  204,
      170, 35,  174, 269, 201, 487, 334, 343, 500, 82,  286, 84,  142, 225, 375,
      434, 217, 410, 362, 216, 360, 234, 207, 108, 421, 420, 205, 369, 448, 233,
      500, 405, 372, 198, 294, 254, 223, 204, 425, 149, 184, 349, 40,  419, 87,
      387, 147, 493, 274, 59,  403, 496, 176, 376, 191, 119, 253, 47,  102, 259,
      1,   310, 240, 335, 358, 214, 58,  326, 136, 34,  135, 152, 3,   181, 251,
      197, 315, 245, 220, 432, 40,  130, 92,  483, 188, 292, 8,   174, 69,  477,
      55,  164, 424, 187, 467, 480, 274, 237, 181, 150, 329, 192, 442, 369, 348,
      488, 232, 150, 22,  151, 96,  280, 121, 398, 382, 34,  290, 336, 456, 487,
      440, 273, 389, 122, 279, 126, 249, 152, 464, 320, 335, 437, 417, 494, 250,
      32,  383, 145, 308, 132, 478, 385, 187, 151, 343, 68,  428, 456, 29,  436,
      1,   443, 123, 296, 133, 72,  305, 274, 429, 407, 391, 266, 215, 307, 5,
      201, 299, 185, 336, 431, 484, 133, 62,  31,  171, 195, 112, 240, 347, 437,
      164, 77,  381, 305, 2,   251, 240, 117, 155, 268, 450, 146, 224, 291, 46,
      169, 206, 255, 6,   241, 211, 308, 204, 438, 32,  216, 343, 241, 499, 10,
      470, 445, 237, 27,  324, 479, 44,  170, 200, 267, 300, 341, 435, 202, 129,
      433, 311, 484, 149, 202, 251, 228, 239, 311, 274, 401, 189, 412, 496, 271,
      170, 457, 295, 94,  431, 164, 438, 85,  377, 195, 186, 39,  407, 194, 171,
      100, 286, 193, 150, 159, 252, 107, 282, 178, 220, 426, 103, 307, 311, 214,
      274, 496, 255, 253, 490, 303, 22,  38,  197, 33,  342, 486, 179, 273, 345,
      24,  484, 226, 441, 363, 400, 340, 25,  59,  259, 62,  154, 235, 440, 407,
      157, 258, 98,  137, 498, 39,  479, 290, 386, 364, 164, 204, 411, 33,  342,
      495, 423, 343, 248, 411, 368, 499, 230, 330, 216, 169, 389, 236, 49,  432,
      74,  470, 164, 158, 143, 347, 473, 370, 448, 29,  254, 38,  179, 176, 30,
      200, 431, 399, 30,  482, 407, 360, 270, 182, 480, 475, 188, 276, 111, 123,
      468, 215, 225, 165, 327, 283, 436, 490, 156, 76,  444, 317, 256, 438, 73,
      61,  237, 401, 99,  277, 270, 428, 121, 7,   147, 179, 147, 111, 53,  412,
      400, 372, 19,  343, 309, 194, 94,  35,  260, 391, 493, 372, 173, 497, 373,
      351, 4,   63,  72,  58,  260, 8,   195, 219, 82,  160, 279, 99,  211, 426,
      47,  355, 58,  352, 175, 430, 50,  208, 242, 338, 348, 484, 466, 62,  146,
      110, 279, 53,  491, 93,  402, 124, 44,  267, 199, 497, 70,  386, 419, 6,
      182, 264, 221, 409, 407, 190, 435, 146, 16,  318, 65,  184, 141, 120, 396,
      129, 48,  237, 74,  478, 370, 312, 55,  13,  231, 279, 63,  19,  231, 158,
      152, 334, 494, 43,  22,  342, 335, 265, 341, 462, 394, 255, 84,  279, 205,
      474, 302, 330, 187, 484, 71,  102, 388, 149, 127, 399, 28,  271, 44,  175,
      389, 149, 8,   276, 449, 360, 435, 17,  198, 498, 440, 417, 150, 144, 141,
      178, 67,  233, 303, 346, 423, 334, 227, 24,  280, 27,  456, 405, 403, 443,
      462, 197, 228, 407, 233, 304, 131, 65,  485, 464, 285, 306, 84,  296, 381,
      106, 307, 265, 195, 263, 154, 138, 183, 239, 27,  432, 123, 392, 69,  293,
      265, 466, 391, 161, 279, 374, 95,  155, 213, 432, 464, 226, 227, 97,  489,
      104, 106, 152, 390, 190, 271, 416, 190, 167, 333, 145, 53,  468, 277, 411,
      119, 436, 326, 340, 96,  297, 497, 408, 125, 177, 354, 229, 333, 25,  482,
      177, 182, 270, 186, 170, 450, 214, 439, 401, 447, 336, 27,  181, 156, 227,
      461, 114, 316, 328, 334, 317, 496, 178, 181, 398, 51,  10,  163, 4,   348,
      197, 401, 72,  461, 459, 94,  322, 13,  330, 201, 399, 250, 77,  61,  231,
      50,  177, 465, 93,  340, 10,  51,  416, 481, 435, 313, 479, 408, 54,  331,
      169, 361, 360, 226, 298, 163, 150, 392, 164, 368, 165, 443, 223, 345, 440,
      465, 118, 289, 161, 9,   478, 165, 104, 91,  362, 47,  446, 126, 412, 378,
      454, 366, 277, 58,  47,  453, 114, 442, 137, 312, 416, 94,  192, 250, 177,
      382, 125, 97,  318, 405, 176, 268, 49,  213, 147, 158, 378, 389, 34,  164,
      459, 35,  54,  166, 121, 412, 367, 393, 197, 202, 425, 95,  287, 385, 109,
      50,  298, 97,  65,  148, 268, 47,  254, 392, 60,  252, 411, 128, 34,  405,
      241, 270, 339, 61,  28,  299, 419, 364, 336, 430, 431, 298, 51,  229, 259,
      470, 164, 222, 63,  461, 315, 194, 361, 218, 90,  473, 55,  435, 73,  369,
      101, 395, 179, 7,   138, 418, 97,  210, 245, 497, 35,  361, 148, 214, 381,
      470, 244, 420, 287, 299, 58,  146, 315, 279, 16,  74,  418, 360, 232, 287,
      266, 330, 500, 307, 449, 82,  496, 136, 310, 164, 423, 158, 446, 417, 57,
      155, 296, 143, 391, 17,  38,  234, 476, 172, 324, 11,  350, 301, 172, 437,
      123, 252, 357, 445, 10,  242, 328, 202, 208, 273, 90,  48,  117, 29,  315,
      102, 262, 247, 17,  428, 371, 215, 343, 188, 252, 321, 285, 436, 89,  61,
      408, 373, 206, 224, 229, 326, 384, 430, 77,  4,   97,  472, 314, 184, 492,
      252, 443, 154, 78,  383, 79,  97,  154, 444, 421};
  Solution s;
  auto l1 = s.longestArithSeqLength(nums1);
  auto l2 = s.longestArithSeqLength(nums2);
  auto l3 = s.longestArithSeqLength(nums3);
  auto l4 = s.longestArithSeqLength(nums4);
  auto l5 = s.longestArithSeqLength(nums5);
  DEBUG(l1, 4);
  DEBUG(l2, 3);
  DEBUG(l3, 4);
  DEBUG(l4);
  DEBUG(nums5.size(), l5);
  return 0;
#endif
  return Solution::longestArithSeqLength({20, 1, 15, 3, 10, 5, 8});
}
